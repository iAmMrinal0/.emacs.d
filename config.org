** User details
#+BEGIN_SRC emacs-lisp :results output silent :tangle yes
(setq user-full-name "Mrinal Purohit"
      user-mail-address "iammrinal0@gmail.com")
#+END_SRC
** Mac specific
*** Beginning of line and end of line
#+BEGIN_SRC emacs-lisp :results output silent
  (global-set-key [home] 'move-beginning-of-line)
  (global-set-key [end] 'move-end-of-line)
  (global-set-key (kbd "C-c b") 'beginning-of-buffer)
  (global-set-key (kbd "C-c e") 'end-of-buffer)
#+END_SRC
*** Command and alt keys
#+BEGIN_SRC emacs-lisp :results output silent
  (setq mac-option-key-is-meta t)
  (setq mac-command-key-is-meta t)
  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier 'super)
  (defun prelude-swap-meta-and-super ()
    "Swap the mapping of Meta and Super.
  Very useful for people using their Mac with a
  Windows external keyboard from time to time."
    (interactive)
    (if (eq mac-command-modifier 'super)
        (progn
          (setq mac-command-modifier 'meta)
          (setq mac-option-modifier 'super)
          (message "Command is now bound to META and Option is bound to SUPER."))
      (progn
        (setq mac-command-modifier 'super)
        (setq mac-option-modifier 'meta)
        (setq mac-option-key-is-meta t)
        (message "Command is now bound to SUPER and Option is bound to META."))))

  (global-set-key (kbd "C-c w") 'prelude-swap-meta-and-super)
#+END_SRC
** Start server
#+BEGIN_SRC emacs-lisp :results output silent :tangle no
  (require 'server)
  (unless (server-running-p)
    (server-start))
#+END_SRC
** Package initializations
*** Package archives
Add =package-archives= and install =use-package=, =exec-path-from-shell=
#+BEGIN_SRC emacs-lisp :results output silent
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (unless (package-installed-p 'exec-path-from-shell)
      (package-refresh-contents)
      (package-install 'exec-path-from-shell))

  (eval-when-compile
    (require 'use-package))

  (setq-default use-package-always-ensure t)
#+END_SRC
*** Exec path from shell
#+BEGIN_SRC emacs-lisp :results output silent :tangle no
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
#+END_SRC
*** Load secrets
#+BEGIN_SRC emacs-lisp :results silent :tangle no
  (load "~/.emacs.d/secrets")
#+END_SRC
*** Enable custom themes
#+BEGIN_SRC emacs-lisp :results output silent
  (setq custom-safe-themes t)
#+END_SRC
** Snippets
*** Smarter move beginning of line
#+BEGIN_SRC emacs-lisp :results output silent
  (defun smarter-move-beginning-of-line (arg)
    "Move point back to indentation of beginning of line.

  Move point to the first non-whitespace character on this line.
  If point is already there, move to the beginning of the line.
  Effectively toggle between the first non-whitespace character and
  the beginning of the line.

  If ARG is not nil or 1, move forward ARG - 1 lines first.  If
  point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1))))

  ;; remap C-a to `smarter-move-beginning-of-line'
  (global-set-key (kbd "C-a") 'smarter-move-beginning-of-line)
#+END_SRC
** Editing defaults
*** Column number
#+BEGIN_SRC emacs-lisp :results output silent
  (column-number-mode t)
#+END_SRC

*** Highlight currrent line
#+BEGIN_SRC emacs-lisp :results output silent
  (global-hl-line-mode t)
#+END_SRC
*** Word Wrap
#+BEGIN_SRC emacs-lisp :results output silent
  (global-visual-line-mode t)
#+END_SRC
*** No double space sentences
#+BEGIN_SRC emacs-lisp :results output silent
  (setq-default sentence-end-double-space nil)
#+END_SRC
*** Dialogue boxes
#+BEGIN_SRC emacs-lisp :results output silent
  (setq use-dialog-box nil)
#+END_SRC
*** Show tilde `~` for empty lines in left fringe
#+BEGIN_SRC emacs-lisp :results output silent
  (define-fringe-bitmap 'tilde [0 0 0 113 219 142 0 0] nil nil 'center)
  (set-fringe-bitmap-face 'tilde 'font-lock-comment-face)
  (setcdr (assq 'empty-line fringe-indicator-alist) 'tilde)
  (setq-default indicate-empty-lines t)
#+END_SRC
*** Display date/time in modeline
#+BEGIN_SRC emacs-lisp :results output silent
  (setq display-time-day-and-date t)
  (setq display-time-format "%H:%M %a %e %B %Y")
  (setq display-time-default-load-average nil)
  (display-time)
#+END_SRC
*** Change prompts
Make =yes= or =no= be =y= or =no=
#+BEGIN_SRC emacs-lisp :results output silent
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Clipboard management
#+BEGIN_SRC emacs-lisp :results silent
  (setq save-interprogram-paste-before-kill t)
#+END_SRC
*** Encoding
#+BEGIN_SRC emacs-lisp :results output silent
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
#+END_SRC
*** Hide menu, tool, scroll bar
#+BEGIN_SRC emacs-lisp :results output silent
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
*** Cursor
Cursor type to =bar= and disable cursor blink
#+BEGIN_SRC emacs-lisp :results output silent
  (setq-default cursor-type 'bar)
  (blink-cursor-mode -1)
#+END_SRC
*** Replace selected text
#+BEGIN_SRC emacs-lisp :results output silent
  (delete-selection-mode t)
#+END_SRC
*** Don't ask whether to open symlinked files, just open them
#+BEGIN_SRC emacs-lisp :results output silent
  (setq vc-follow-symlinks t)
#+END_SRC
*** Easier mark popping
Pressing =C-u C-SPC= to pop mark every time is cumbersome, this setting helps to just do =C-u C-SPC= and =C-SPC= repeatedly
#+BEGIN_SRC emacs-lisp :results output silent
  (setq set-mark-command-repeat-pop t)
#+END_SRC
*** Load newest byte code
#+BEGIN_SRC emacs-lisp :results output silent
  (setq load-prefer-newer t)
#+END_SRC
*** Warn only when opening files larger than 100MB
#+BEGIN_SRC emacs-lisp :results output silent
  (setq large-file-warning-threshold 100000000)
#+END_SRC
*** Set column to 80
#+BEGIN_SRC emacs-lisp :results output silent
  (setq-default fill-column 80)
#+END_SRC
*** Disable tab indentation
#+BEGIN_SRC emacs-lisp :results output silent
  (setq-default indent-tabs-mode nil
                tab-width 4)
#+END_SRC
*** Font
#+BEGIN_SRC emacs-lisp :results output silent
  (add-to-list 'default-frame-alist
               '(font . "-*-Iosevka-normal-normal-normal-*-18-*-*-*-m-0-iso10646-1"))
  ;; old code
  ;; (set-face-attribute 'default nil
  ;;                     :family "Source Code Pro"
  ;;                     :foundry "ADBO"
  ;;                     :height 105
  ;;                     :weight 'normal
  ;;                     :width 'normal)

  ;; (set-default-font "Source Code Pro" nil t)
  ;; (set-face-attribute 'default nil :height 105)

#+END_SRC
*** Smooth scrolling, from [[https://github.com/ChillarAnand][Chillar Anand]]
#+BEGIN_SRC emacs-lisp :results output silent
  ;; nice scrolling
  (setq scroll-margin 0
        scroll-conservatively 100000
        scroll-preserve-screen-position t)
#+END_SRC
*** Startup messages
#+BEGIN_SRC emacs-lisp :results output silent
(setq inhibit-startup-message t
      initial-scratch-message ""
      inhibit-startup-echo-area-message t)
#+END_SRC
*** Split window Vertically
#+BEGIN_SRC emacs-lisp :results output silent
  (setq split-height-threshold nil)
  (setq split-width-threshold 160)
#+END_SRC
*** Disable list all buffer key-binding
#+BEGIN_SRC emacs-lisp :results output silent
  (global-unset-key (kbd "C-x C-b"))
#+END_SRC
*** Delete Trailing whitespace on save
#+BEGIN_SRC emacs-lisp :results output silent
  (add-hook 'before-save-hook 'whitespace-cleanup)
#+END_SRC
*** Faster scroll movement
#+BEGIN_SRC emacs-lisp :results output silent
  (setq auto-window-vscroll nil)
#+END_SRC
** Files
*** Auto Revert Mode
Revert buffers automatically when files are changed externally
#+BEGIN_SRC emacs-lisp :results output silent
(global-auto-revert-mode t)
#+END_SRC
Revert buffers based on VC info
#+BEGIN_SRC emacs-lisp :results output silent
  (setq auto-revert-check-vc-info t)
#+END_SRC
** Desktop mode
*** Change =desktop-save= values, picked from [[https://github.com/ChillarAnand][Chillar Anand]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package desktop
    :config
    (setq desktop-dirname             (concat user-emacs-directory "desktop/")
          desktop-base-file-name      "emacs.desktop"
          desktop-base-lock-name      "lock"
          desktop-path                (list desktop-dirname)
          desktop-save                t
          desktop-files-not-to-save   "^$"  ;reload tramp paths
          desktop-load-locked-desktop t)
    (desktop-save-mode t))
#+END_SRC
** Don't make backup files
#+BEGIN_SRC emacs-lisp :results output silent
  (setq make-backup-files nil)
#+END_SRC
** Save Place
#+BEGIN_SRC emacs-lisp :results output silent
  (save-place-mode t)
#+END_SRC
** Projects
*** Projectile [[https://github.com/bbatsov/projectile][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package projectile
    :defer 5
    :init
    (setq projectile-keymap-prefix (kbd "C-c p"))
    (projectile-mode))
#+END_SRC
** Packages
*** Ace-window [[https://github.com/abo-abo/ace-window][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package ace-window
    :bind
    ("M-o" . ace-window)
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+END_SRC
*** Ag [[https://github.com/Wilfred/ag.el][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package ag)
#+END_SRC

*** All the icons [[https://github.com/domtronn/all-the-icons.el][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package all-the-icons)
#+END_SRC
*** Anzu [[https://github.com/winterTTr/ace-jump-mode][GitHub]]
For =current match= and =total match= information in the mode-line
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package anzu
    :diminish (anzu-mode)
    :defer 5
    :config
    (global-set-key [remap query-replace] 'anzu-query-replace)
    (global-set-key [remap query-replace-regexp] 'anzu-query-replace-regexp)
    :init
    (global-anzu-mode t))
#+END_SRC

*** Avy [[https://github.com/abo-abo/avy][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package avy
    :bind
    ("C-:" . avy-goto-char)
    ("M-g g" . avy-goto-line)
    ("M-g M-g". avy-goto-line)
    :config
    (setq avy-background t
          avy-keys (number-sequence ?a ?z)
          avy-keys-alist
        `((avy-goto-char . ,(number-sequence ?a ?f))
          (avy-goto-word-1 . (?f ?g ?h ?j)))
          avy-highlight-first t)
    (avy-setup-default))
#+END_SRC

*** Buffer show binding just to kill buffers easily
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package bs
    :bind
    ("M-g M-b" . bs-show))
#+END_SRC
*** Buffer Uniquify [[https://github.com/emacs-mirror/emacs/blob/master/lisp/uniquify.el][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package uniquify
    :ensure nil
    :defer 2
    :config
    (setq uniquify-buffer-name-style 'forward
          uniquify-separator "/"
          uniquify-after-kill-buffer-p t
          uniquify-ignore-buffers-re "^\\*"))
#+END_SRC
*** Diminish [[https://github.com/emacsmirror/diminish][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package diminish
    :diminish (auto-revert-mode visual-line-mode))
#+END_SRC
*** Editorconfig [[https://github.com/editorconfig/editorconfig-emacs][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package editorconfig
    :config
    (editorconfig-mode 1))
#+END_SRC
*** Expand Region [[https://github.com/magnars/expand-region.el][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package expand-region
    :defer t
    :bind
    ("C-=" . er/expand-region))
#+END_SRC
*** Flycheck [[https://github.com/flycheck/flycheck][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent :tangle yes
  (use-package flycheck
    :defer t
    :config
    (define-key flycheck-mode-map flycheck-keymap-prefix nil)
    (setq flycheck-idle-change-delay 3.0)
    (define-key flycheck-mode-map flycheck-keymap-prefix flycheck-command-map)
    :init
    (global-flycheck-mode))

      ;; (defhydra hydra-flycheck (:hint nil))
    (defhydra hydra-flycheck
      (:pre (progn (setq hydra-hint-display-type t) (flycheck-list-errors))
       :post (progn (setq hydra-hint-display-type nil) (quit-windows-on "*Flycheck errors*"))
       :hint nil)
      "Errors"
      ("f"  flycheck-error-list-set-filter                            "Filter")
      ("j"  flycheck-next-error                                       "Next")
      ("k"  flycheck-previous-error                                   "Previous")
      ("gg" flycheck-first-error                                      "First")
      ("G"  (progn (goto-char (point-max)) (flycheck-previous-error)) "Last")
      ("q"  nil))

  (bind-key "C-c f" 'hydra-flycheck/body)
#+END_SRC
*** Flyspell [[https://github.com/emacs-mirror/emacs/blob/master/lisp/textmodes/flyspell.el][GitHub]]
Use flyspell for =markdown= files
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package flyspell
    :defer t
    :mode ("'\\.md\\'" . flyspell-mode))
#+END_SRC
*** Free keys [[https://github.com/Fuco1/free-keys][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
(use-package free-keys)
#+END_SRC
*** Git
**** Git Messenger [[https://github.com/syohex/emacs-git-messenger][GitHub]] (currently unused)
#+BEGIN_SRC emacs-lisp :results output silent :tangle no
  (use-package git-messenger
    :bind
    ("C-c v p" . git-messenger:popup-message)
    :config
    (setq git-messenger:show-detail t
          git-messenger:use-magit-popup t))
#+END_SRC
**** Git Timemachine [[https://github.com/pidu/git-timemachine][GitHub]] (currently unused)
#+BEGIN_SRC emacs-lisp :results output silent :tangle no
  (use-package git-timemachine
    :bind
    ("C-c C-x t" . git-timemachine))
#+END_SRC
**** Magit [[https://github.com/magit/magit][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package magit
    :defer 5
    :bind
    (("C-x g" . magit-status)
     ("C-c g b" . magit-blame)
     )
    :config
    (setq magit-commit-arguments nil ;;(quote ("--gpg-sign=E27C4BC509095144"))
          magit-diff-use-overlays nil
          magit-diff-refine-hunk t
          ;; magit-blame-styles '((side-view
          ;;                     (margin-format    . (" %s%f" " %C %a" " %H"))
          ;;                     (margin-width     . 42)
          ;;                     (margin-face      . magit-blame-margin)
          ;;                     (margin-body-face . (magit-blame-dimmed))))
          )
    )
#+END_SRC
*** Google-this [[https://github.com/Malabarba/emacs-google-this][GitHub]] (currently unused)
#+BEGIN_SRC emacs-lisp :results output silent :tangle no
  (use-package google-this
    :diminish (google-this-mode)
    :bind
    ("C-c /" . google-this-mode-submap)
    :config
    (google-this-mode 1))
#+END_SRC
*** Helm [[https://github.com/emacs-helm/helm][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package helm
    :defer 5
    :diminish (helm-mode)
    :bind
    ("M-g M-m" . helm-global-mark-ring)
    ("M-x" . helm-M-x)
    ("C-x b" . helm-mini)
    ("M-y" . helm-show-kill-ring)
    ("C-x C-f" . helm-find-files)
    :config
    (setq helm-M-x-fuzzy-match                  t
          helm-buffers-fuzzy-matching           t
          helm-recentf-fuzzy-match              t)
    ;;       helm-bookmark-show-location           t
    ;;       helm-buffers-fuzzy-matching           t
    ;;       helm-completion-in-region-fuzzy-match t
    ;;       helm-file-cache-fuzzy-match           t
    ;;       helm-imenu-fuzzy-match                t
    ;;       helm-mode-fuzzy-match                 t
    ;;       helm-locate-fuzzy-match               t
    ;;       helm-quick-update                     t
    ;;       helm-recentf-fuzzy-match              t
    ;;       helm-semantic-fuzzy-match             t)
    :init
    (require 'helm-config)
    (helm-mode 1))
#+END_SRC
**** Helm Flx [[https://github.com/PythonNut/helm-flx][GitHub]] (currently unused)
#+BEGIN_SRC emacs-lisp :results output silent :tangle no
  (use-package helm-flx
    :init
    (helm-flx-mode +1))
#+END_SRC
**** Helm Fuzzier [[https://github.com/EphramPerdition/helm-fuzzier][GitHub]] (currently unused)
#+BEGIN_SRC emacs-lisp :results output silent :tangle no
  ;; (use-package helm-fuzzier
  ;;   :init
  ;;   (helm-fuzzier-mode 1))

#+END_SRC
**** Helm Projectile [[https://github.com/bbatsov/helm-projectile][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package helm-projectile
    :defer 5
    :config
    (helm-projectile-on))
#+END_SRC
*** Helm Ag [[https://github.com/emacsorphanage/helm-ag][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package helm-ag
    :config
    (setq helm-ag-fuzzy-match t
          helm-ag-base-command "ag --nocolor --nogroup --ignore-case --hidden"))
#+END_SRC
*** Hungry Delete [[https://github.com/nflath/hungry-delete][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
(use-package hungry-delete
    :diminish (hungry-delete-mode)
    :config
    (global-hungry-delete-mode))
#+END_SRC
*** Hydra [[https://github.com/abo-abo/hydra][GitHub]]
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :defer t)
#+END_SRC
*** Ido (currently unused)
**** Flx-ido
#+BEGIN_SRC emacs-lisp :results output silent :tangle no
  (use-package flx-ido
    :init (flx-ido-mode t)
    :config
    (setq ido-enable-flex-matching t
          ido-use-faces nil))
#+END_SRC
**** Ido mode
#+BEGIN_SRC emacs-lisp :results output silent :tangle no
  (use-package ido
    :init
    (ido-mode t)
    (setq ido-everywhere t))
#+END_SRC
**** Ido-vertical mode
#+BEGIN_SRC emacs-lisp :results output silent :tangle no
  (use-package ido-vertical-mode
    :init
    (ido-vertical-mode t)
    (setq ido-vertical-define-keys 'C-n-C-p))
#+END_SRC
*** Keychain [[https://github.com/tarsius/keychain-environment][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package keychain-environment
    :defer t
    :init
    (keychain-refresh-environment))
#+END_SRC
*** Key Frequency [[https://github.com/dacap/keyfreq][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package keyfreq
    :config
    (keyfreq-mode t)
    (keyfreq-autosave-mode t))
#+END_SRC
*** Multiple Cursors [[https://github.com/magnars/multiple-cursors.el][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
(use-package multiple-cursors
    :commands (mc/add-cursor-on-click
               mc/edit-beginning-of-lines
               mc/edit-lines
               mc/insert-numbers
               mc/qmark-all-dwim
               mc/mark-all-in-region-regexp
               mc/mark-all-like-this
               mc/mark-next-like-this
               mc/mark-previous-like-this
               mc/mark-sgml-tag-pair
               mc/reverse-regions
               mc/skip-to-next-like-this
               mc/skip-to-previous-like-this
               mc/sort-regions
               mc/unmark-next-like-this
               mc/unmark-previous-like-this))

(defhydra hydra-mc (:hint nil)
      "
          ^Up^            ^Down^        ^All^                ^Lines^               ^Edit^                 ^Other^
    ----------------------------------------------------------------------------------------------------
    [_p_]   Next    [_n_]   Next    [_a_] All like this  [_l_] Edit lines      [_i_] Insert numbers   [_t_] Tag pair
    [_P_]   Skip    [_N_]   Skip    [_r_] All by regexp  [_L_] Edit line beg.  [_s_] Sort regions      ^ ^
    [_M-p_] Unmark  [_M-n_] Unmark  [_d_] All DWIM        ^ ^                  [_R_] Reverse regions  [_q_] Quit
    "
      ("p" mc/mark-previous-like-this)
      ("P" mc/skip-to-previous-like-this)
      ("M-p" mc/unmark-previous-like-this)

      ("n" mc/mark-next-like-this)
      ("N" mc/skip-to-next-like-this)
      ("M-n" mc/unmark-next-like-this)

      ("a" mc/mark-all-like-this :exit t)
      ("r" mc/mark-all-in-region-regexp :exit t)
      ("d" mc/mark-all-dwim :exit t)

      ("l" mc/edit-lines :exit t)
      ("L" mc/edit-beginnings-of-lines :exit t)

      ("i" mc/insert-numbers)
      ("s" mc/sort-regions)
      ("R" mc/reverse-regions)

      ("t" mc/mark-sgml-tag-pair)
      ("q" nil)

      ("<mouse-1>" mc/add-cursor-on-click)
      ("<down-mouse-1>" ignore)
      ("<drag-mouse-1>" ignore))

(bind-key "C-c m" 'hydra-mc/body)
#+END_SRC
*** Paradox [[https://github.com/Malabarba/paradox][GitHub]] (currently unused)
#+BEGIN_SRC emacs-lisp :results output silent :tangle no
  (use-package paradox
    :defer t
    :config
    (setq paradox-execute-asynchronously t))
#+END_SRC
*** PDF Tools [[https://github.com/politza/pdf-tools][GitHub]]
For better/faster PDF rendering
#+BEGIN_SRC emacs-lisp :results output silent :tangle yes
  (use-package pdf-tools
    :init
    (pdf-tools-install))
#+END_SRC
*** Smartparens [[https://github.com/Fuco1/smartparens][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package smartparens
    :diminish (smartparens-mode)
    :defer 5
    :bind
    ("C-c s" . sp-unwrap-sexp)
    :init
    (use-package smartparens-config
      :ensure nil)
    (smartparens-global-mode)
    (show-smartparens-global-mode))
#+END_SRC
*** Undo tree [[https://elpa.gnu.org/packages/undo-tree.html][Elpa]]
    For undo visualizations
    #+BEGIN_SRC emacs-lisp :results output silent
      (use-package undo-tree
        :diminish undo-tree-mode
        :bind
        ("C-z" . undo)
        ("C-S-z" . undo-tree-redo)
        :config
        (setq undo-tree-auto-save-history t
              undo-tree-history-directory-alist `(("." . ,(concat user-emacs-directory "undo-tree-history/")))
              undo-tree-visualizer-diff t
              undo-tree-visualizer-timestamps t)
        :init
        (global-undo-tree-mode))
#+END_SRC
*** Regex (Base) [[https://github.com/emacs-mirror/emacs/blob/master/lisp/emacs-lisp/re-builder.el][GitHub Mirror]]
#+BEGIN_SRC emacs-lisp :results output silent
(use-package re-builder
  :init
  (setq reb-re-syntax 'string))
#+END_SRC
*** Smartscan [[https://github.com/mickeynp/smart-scan][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package smartscan
    :init
    (global-smartscan-mode))
#+END_SRC
*** Which key [[https://github.com/justbur/emacs-which-key][GitHub]]
Displays available keybindings in a popup
#+BEGIN_SRC emacs-lisp :results output silent
(use-package which-key
    :defer t
    :diminish (which-key-mode)
    :init
    (which-key-setup-side-window-bottom)
    (which-key-mode))
#+END_SRC
*** Winum Mode [[https://github.com/deb0ch/emacs-winum][GitHub]] (currently unused)
#+BEGIN_SRC emacs-lisp :results output silent :tangle no
  (use-package winum
    :config
    (winum-set-keymap-prefix (kbd "C-c"))
    :bind
    ("M-1" . winum-select-window-1)
    ("M-2" . winum-select-window-2)
    ("M-3" . winum-select-window-3)
    ("M-4" . winum-select-window-4)
    :init
    (winum-mode))
#+END_SRC
*** Zop-to-char [[https://github.com/thierryvolpiatto/zop-to-char][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package zop-to-char
    :config
    (global-set-key [remap zap-to-char] 'zop-to-char))
#+END_SRC
* Programming
** Auto-complete [[https://github.com/auto-complete/auto-complete][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package auto-complete
    :defer t
    :init
    (global-auto-complete-mode t)
    (ac-config-default))
#+END_SRC
** Clean Mode
#+BEGIN_SRC emacs-lisp :results output silent :tangle no
  (use-package clean-mode
    :load-path "clean-mode/"
    :init
    (add-to-list 'auto-mode-alist '("\\.cl\\'" . clean-mode)))
#+END_SRC
** Direnv [[https://github.com/wbolster/emacs-direnv][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package direnv
    :config
    (direnv-mode))
  (defhydra hydra-de (:hint nil)
        "
            ^Allow^          ^Update^                     ^Other^
      ----------------------------------------------------------------------------------------------------
      [_a_]   Allow    [_u_]   Update Environment   [_q_]   Quit
      "
        ("a" direnv-allow :exit t)
        ("u" direnv-update-environment :exit t)
        ("q" nil))

  (bind-key "C-c d" 'hydra-de/body)
#+END_SRC
** Dhall [[https://github.com/psibi/dhall-mode][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package dhall-mode
    :ensure t
    :config
    (setq
      ;; uncomment the next line to disable automatic format
      dhall-format-at-save nil

      ;; comment the next line to use unicode syntax
      dhall-format-arguments (\` ("--ascii"))

      ;; header-line is obsoleted by lsp-mode
      dhall-use-header-line nil))
#+END_SRC
** Groovy [[https://github.com/Groovy-Emacs-Modes/groovy-emacs-modes][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package groovy-mode
    :defer t
    :config
    (setq groovy-indent-offset 2))
#+END_SRC
** Haskell
*** Haskell mode [[https://github.com/haskell/haskell-mode][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package haskell-mode
    :bind
    ([f8] . haskell-navigate-imports))
#+END_SRC
*** Dante [[https://github.com/jyp/dante][GitHub]] (currently unused)
#+BEGIN_SRC emacs-lisp :results output silent :tangle no
  (use-package dante
    :after haskell-mode
    :commands 'dante-mode
    :init
    (add-hook 'haskell-mode-hook 'flycheck-mode)
    (add-hook 'haskell-mode-hook 'dante-mode)
    (add-hook 'dante-mode-hook
     '(lambda () (flycheck-add-next-checker 'haskell-dante
                  '(warning . haskell-hlint)))))
#+END_SRC
*** Hindent [[https://github.com/mihaimaruseac/hindent][GitHub]] (currently unused)
#+BEGIN_SRC emacs-lisp :results output silent :tangle no
  (use-package hindent
    :config
    (add-hook 'haskell-mode-hook 'hindent-mode))
#+END_SRC
*** Hasky-extensions [[https://github.com/hasky-mode/hasky-extensions][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package hasky-extensions
    :bind
    ("C-c y" . hasky-extensions)
    ("C-c h x" . hasky-extensions-browse-docs))
#+END_SRC
*** LSP
**** LSP mode [[https://github.com/emacs-lsp/lsp-mode][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent :tangle yes
  (use-package lsp-mode
    :hook ((dhall-mode haskell-mode) . lsp)
    :init
    (add-hook 'haskell-mode-hook 'direnv-update-environment)
    :commands lsp
    :config
    (setq lsp-prefer-flymake nil
          lsp-modeline-diagnostics-enable t))

  (defhydra hydra-lsp (:hint nil)
        "
            ^Start^              ^Action^                    ^Other^
      ----------------------------------------------------------------------------------------------------
      [_s_]   Start LSP    [_a_]   Apply code action   [_q_]   Quit
      [_r_]   Restart LSP
      "
        ("s" lsp :exit t)
        ("r" lsp-workspace-restart :exit t)
        ("a" lsp-execute-code-action :exit t)
        ("q" nil))

  (bind-key "C-c c" 'hydra-lsp/body)
#+END_SRC
**** LSP Haskell [[https://github.com/emacs-lsp/lsp-haskell][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent :tangle yes
  (use-package lsp-haskell
    :after (haskell-mode lsp-mode)
    :defer t
    :custom
    (lsp-haskell-process-path-hie "haskell-language-server-wrapper")
    :hook
    (haskell-mode . lsp-haskell-set-hlint-on)
    (haskell-mode . lsp-haskell-set-completion-snippets-on))
#+END_SRC
**** LSP UI [[https://github.com/emacs-lsp/lsp-ui][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent :tangle yes
  (use-package lsp-ui
    :commands lsp-ui-mode
    :hook (prog-mode . lsp-ui-mode)
    :config
    (setq lsp-ui-flycheck-enable t
          lsp-ui-doc-position 'bottom))
  ;; (use-package company-lsp :commands company-lsp)
  ;; (use-package helm-lsp :commands helm-lsp-workspace-symbol)
  ;; (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
#+END_SRC
** JavaScript
*** js2-mode [[https://github.com/mooz/js2-mode][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package js2-mode
    :defer 5
    :mode ("\\.js\\'" . js2-mode)
    :init
    (setq js2-include-node-externs t)
    (setq js2-basic-offset 2)
    (setq js-indent-level 2)
    (setq js2-strict-missing-semi-warning nil)
    (setq js-switch-indent-offset 2))
#+END_SRC
*** js2-refactor [[https://github.com/magnars/js2-refactor.el][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package js2-refactor
    :diminish (js2-refactor-mode)
    :defer t
    :config
    (js2r-add-keybindings-with-prefix "C-c C-m")
    (add-hook 'js2-mode-hook 'js2-refactor-mode))
#+END_SRC
*** xref-js2 [[https://github.com/NicolasPetton/xref-js2][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package xref-js2
    :defer 5
    :init
    (add-hook 'js2-mode-hook (lambda ()
                               (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t))))
#+END_SRC
** Nix
*** Nix-mode [[https://github.com/NixOS/nix-mode][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package nix-mode
    :mode ("\\.nix$" . nix-mode))
#+END_SRC
** PureScript (currently unused)
*** PureScript mode
#+BEGIN_SRC emacs-lisp :results output silent :tangle no
  (use-package purescript-mode
    :commands purescript-mode
    :mode (("\\.purs$" . purescript-mode))
    :init
    (add-hook 'purescript-mode-hook 'turn-on-purescript-decl-scan))
#+END_SRC
*** Psc-ide
#+BEGIN_SRC emacs-lisp :results output silent :tangle no
  (use-package psc-ide
    :diminish (purescript-indentation-mode psc-ide-mode company-mode)
    :config
    (setq psc-ide-rebuild-on-save nil
          psc-ide-use-npm-bin t
          psc-ide-editor-mode t)
    :bind
    ("C-c C-v" . psc-ide-flycheck-insert-suggestion)
    :init
    (add-hook 'purescript-mode-hook
              (lambda ()
                (psc-ide-mode)
                (company-mode)
                (turn-on-purescript-indentation))))
#+END_SRC
** Python (currently unused)
#+BEGIN_SRC emacs-lisp :results output silent :tangle no
  (use-package elpy
    :defer t
    :config
    (setq python-indent-offset 4)
    (elpy-enable))

  (use-package jedi
    :defer t
    :init
    (add-hook 'python-mode-hook 'jedi:setup)
    (setq jedi:complete-on-dot t
          jedi:use-shortcuts t))

  (use-package py-autopep8
    :defer t
    :init
    (add-hook 'python-mode-hook 'py-autopep8-enable-on-save))

#+END_SRC
** Snippets [[https://github.com/joaotavora/yasnippet][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package yasnippet
    :defer t
    :diminish (yas-minor-mode)
    :config
    (setq-default yas-prompt-functions '(yas-ido-prompt yas-dropdown-prompt))
    (setq yas-indent-line 'fixed)
    (yas-global-mode 1))

#+END_SRC
** Web mode [[https://github.com/fxbois/web-mode][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package web-mode
    :defer t
    :mode
    ("\\.html?\\'" . web-mode)
    ("\\.css?\\'" . web-mode)
    :config
    (setq web-mode-markup-indent-offset 2
          web-mode-code-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-script-padding 0
          web-mode-enable-auto-expanding t
          web-mode-enable-css-colorization t
          web-mode-enable-auto-pairing nil
          web-mode-enable-auto-closing t
          web-mode-enable-auto-quoting t))
#+END_SRC
** YAML [[https://github.com/yoshiki/yaml-mode][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package yaml-mode
    :defer t)
#+END_SRC
* Documentation
*** Markdown [[https://github.com/defunkt/markdown-mode][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
    (use-package markdown-mode
      :defer t
      :commands (markdown-mode gfm-mode)
      :mode ("\\.md\\'" . gfm-mode)
      :init
      (setq markdown-command "multimarkdown"))
#+END_SRC
*** Org Mode
**** Org (Base) [[https://github.com/bzg/org-mode][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package org
    :defer t
    :bind
    ("C-c l" . org-store-link)
    ("C-c a" . org-agenda)
    :config
    (setq org-log-done t
          org-support-shift-select t
          org-catch-invisible-edits 'show-and-error
          ;; stop emacs asking for confirmation
          org-confirm-babel-evaluate nil
          org-src-fontify-natively t
          org-src-tab-acts-natively t
          org-fontify-whole-heading-line t
          org-fontify-done-headline t
          org-fontify-quote-and-verse-blocks t
          org-todo-keywords '((sequence "TODO(t)" "|" "DONE(d)")
                              (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
                              (sequence "|" "CANCELED(c)"))))
  ;; (setq org-todo-keywords
  ;;       '((sequence "TODO(t)" "IN-PROGRESS(i)" "CANCELLED(c)" DONE(d)"))))
#+END_SRC
**** Org bullets [[https://github.com/sabof/org-bullets][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package org-bullets
    :after org
    :init
    ;; (setq org-bullets-bullet-list '("●"))
    (org-bullets-mode t)
    (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC
* Visuals
** Highlight modes
*** Git Gutter [[https://github.com/emacsorphanage/git-gutter][GitHub]]
For the fringe on the left with live changes
#+BEGIN_SRC emacs-lisp :results output silent :tangle yes
  (use-package git-gutter
    :diminish (git-gutter-mode)
    :defer t
    :init (global-git-gutter-mode t)
    :config
    (setq git-gutter:added-sign "++"
          git-gutter:deleted-sign "--"
          git-gutter:modified-sign "~~"
          git-gutter:update-interval 1)
    ;; (set-face-foreground 'git-gutter:modified-sign "#a36fff")
    ;; (set-face-foreground 'git-gutter:added-sign "#198844")
    ;; (set-face-foreground 'git-gutter:deleted-sign "#cc342b")
    (add-to-list 'git-gutter:update-hooks 'focus-in-hook)
    (add-hook 'git-gutter:update-hooks 'magit-after-revert-hook)
    (add-hook 'git-gutter:update-hooks 'magit-not-reverted-hook))
#+END_SRC
*** Rainbow mode for Programming modes [[https://github.com/emacsmirror/rainbow-mode][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package rainbow-mode
    :diminish rainbow-mode
    :init
    (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC
** Themes
*** Doom theme and custom theme modifications (currently unused)
#+BEGIN_SRC emacs-lisp :results output silent :tangle no
  (use-package doom-themes
    :init
    (load-theme 'doom-one t)
    (setq doom-enable-bold t    ; if nil, bolding are universally disabled
          doom-enable-italic t  ; if nil, italics are universally disabled

          ;; doom-one specific settings
          doom-one-brighter-modeline t
          doom-one-brighter-comments t)
    ;; brighter minibuffer when active
    (add-hook 'minibuffer-setup-hook 'doom-brighten-minibuffer))

  (custom-theme-set-faces
   'doom-one
   '(font-lock-builtin-face ((t (:foreground "c678dd" :bold bold))))
   '(font-lock-comment-face ((t (:foreground "#5699AF" :italic italic))))
   '(font-lock-constant-face      ((t (:foreground "#a9a1e1" :bold bold :italic italic))))
   '(font-lock-function-name-face ((t (:foreground "#c678dd" :bold bold))))
   '(font-lock-keyword-face       ((t (:foreground "#51afef" :italic italic)))))
#+END_SRC
*** Gruvbox theme [[https://github.com/greduan/emacs-theme-gruvbox][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package gruvbox-theme
    :config
    (load-theme 'gruvbox-dark-hard t))
#+END_SRC
** Mode-line
*** Smart-mode-line [[https://github.com/Malabarba/smart-mode-line][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package smart-mode-line
    :init
    (setq sml/theme 'respectful
          sml/mode-width 'full
          sml/name-width 10)
    (sml/setup))
#+END_SRC
*** Zerodark modeline theme [[https://github.com/NicolasPetton/zerodark-theme][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent :tangle yes
  (use-package zerodark-theme
    :config
    (zerodark-setup-modeline-format))
#+END_SRC
*** Powerline modeline with =wave= format (currently unused)
#+BEGIN_SRC emacs-lisp :results output silent :tangle no
  (use-package powerline
    :load-path "custom/powerline"
    :config
    (setq powerline-default-separator 'wave
          powerline-display-buffer-size nil)
    (powerline-default-theme))
#+END_SRC
** Ligatures
#+BEGIN_SRC emacs-lisp :results output silent :tangle no
  (defun my-correct-symbol-bounds (pretty-alist)
      "Prepend a TAB character to each symbol in this alist,
  this way compose-region called by prettify-symbols-mode
  will use the correct width of the symbols
  instead of the width measured by char-width."
      (mapcar (lambda (el)
                (setcdr el (string ?\t (cdr el)))
                el)
              pretty-alist))

    (defun my-ligature-list (ligatures codepoint-start)
      "Create an alist of strings to replace with
  codepoints starting from codepoint-start."
      (let ((codepoints (-iterate '1+ codepoint-start (length ligatures))))
        (-zip-pair ligatures codepoints)))

  ;; list can be found at https://github.com/i-tu/Hasklig
  (setq my-hasklig-ligatures
        (let* ((ligs '("&&" "***" "*>" "\\\\" "||" "|>" "::"
                       "==" "===" "==>" "=>" "=<<" "!!" ">>"
                       ">>=" ">>>" ">>-" ">-" "->" "-<" "-<<"
                       "<*" "<*>" "<|" "<|>" "<$>" "<>" "<-"
                       "<<" "<<<" "<+>" ".." "..." "++" "+++"
                       "/=" ":::" ">=>" "->>" "<=>" "<=<" "<->")))
            (my-correct-symbol-bounds (my-ligature-list ligs #Xe100))))

   ;; nice glyphs for programs with hasklig
    (defun my-set-ligatures ()
      "Add hasklig ligatures for use with prettify-symbols-mode."
      (setq prettify-symbols-alist
            (append my-hasklig-ligatures prettify-symbols-alist))
      (prettify-symbols-mode))

  (defun my-add-to-multiple-hooks (function hooks)
    (mapc (lambda (hook)
            (add-hook hook function))
          hooks))

  (my-add-to-multiple-hooks
   'my-set-ligatures
   '(
     ;; purescript-mode-hook
     haskell-mode-hook
     ))
#+END_SRC
** Rainbow delimiters [[https://github.com/Fanael/rainbow-delimiters][GitHub]]
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package rainbow-delimiters
    :defer t
    :init
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC
